@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

@model List<MenuItem>

<h2>Restaurant Menu</h2>
<h1>Countdown Timer</h1>
<p id="timer">00:00:00</p>

<table class="table">
    <thead>
        <tr>
            <th>Item ID</th>
            <th>Name</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @{
           var cacheKey = Model.Count();
           // var cacheKey ="key";
        }
        <cache expires-after="TimeSpan.FromMinutes(1)" vary-by="@cacheKey">
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Price.ToString("C")</td>
            </tr>
        }
        </cache>
    </tbody>
</table>

<script>
    // Set the target time for the countdown (in seconds)
    const targetTimeInSeconds = 60; // 1 hour
    let remainingTime = targetTimeInSeconds;

    // Function to update the timer display
    function updateTimerDisplay() {
        const timerElement = document.getElementById('timer');
        const hours = Math.floor(remainingTime / 3600);
        const minutes = Math.floor((remainingTime % 3600) / 60);
        const seconds = remainingTime % 60;

        timerElement.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }

    // Function to start the timer
    function startTimer() {
        updateTimerDisplay();

        const timerInterval = setInterval(function () {
            if (remainingTime <= 0) {
                clearInterval(timerInterval);
                alert("Time's up!");
            } else {
                remainingTime--;
                updateTimerDisplay();
            }
        }, 1000); // Update every second (1000 milliseconds)
    }

    // Check if the timer was already started in a previous session
    const startTime = sessionStorage.getItem('timerStartTime');

    if (startTime) {
        // Calculate the time elapsed since the timer was first started
        const currentTime = Math.floor(Date.now() / 1000);
        const elapsedSeconds = currentTime - parseInt(startTime, 10);

        // Adjust the remaining time
        remainingTime = Math.max(targetTimeInSeconds - elapsedSeconds, 0);
    }

    // Start the timer
    startTimer();

    // Store the initial start time in sessionStorage
    if (!startTime) {
        sessionStorage.setItem('timerStartTime', Math.floor(Date.now() / 1000).toString());
    }

  
</script>


